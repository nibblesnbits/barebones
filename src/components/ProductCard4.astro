---
export interface Props {
  product: any;
}
const { product } = Astro.props;
const { Content } = await product.render();
const {
  title,
  imageSrc,
  badgeText,
  mediaFeature,
  features = [],
  ctaText = "SHOP NOW",
  ctaLink = "#",
  ratings,
  reviewLink,
} = product.data;
---

<div
  class="mx-auto max-w-md overflow-hidden rounded-2xl bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 shadow-2xl ring-1 ring-white/10"
>
  <div class="relative">
    <img
      src={imageSrc || "/placeholder.svg"}
      alt={title}
      class="h-56 w-full object-cover opacity-90"
    />
    <div
      class="absolute inset-0 bg-gradient-to-t from-slate-900/50 to-transparent"
    >
    </div>
    {
      badgeText && (
        <div class="absolute top-4 right-4 rounded-lg bg-emerald-500/20 px-3 py-1 backdrop-blur-md">
          <span class="flex items-center text-sm font-semibold text-emerald-300">
            <span class="mr-1">★</span>
            {badgeText}
          </span>
        </div>
      )
    }
  </div>

  <div class="p-6">
    <h2 class="mb-3 text-xl font-bold text-white">{title}</h2>
    <div class="prose prose-sm mb-4 text-slate-300">
      <Content />
    </div>

    {
      features.length > 0 && (
        <div class="mb-6 space-y-2">
          {features.map((feature) => (
            <div class="flex items-center text-sm text-slate-400">
              <div class="mr-3 h-1.5 w-1.5 rounded-full bg-orange-400" />
              <span>{feature}</span>
            </div>
          ))}
        </div>
      )
    }

    {
      mediaFeature && (
        <div class="mb-6 flex items-center rounded-lg border border-slate-700 bg-slate-800/50 p-3">
          <span class="mr-3 flex-1 text-sm font-medium text-slate-300">
            {mediaFeature.text}
          </span>
          <img
            src={mediaFeature.logoSrc || "/placeholder.svg"}
            alt="Media logo"
            class="h-7 w-auto opacity-80"
          />
        </div>
      )
    }

    <div class="space-y-4">
      <a
        href={ctaLink}
        class="block w-full rounded-lg bg-gradient-to-r from-orange-500 to-orange-600 py-3 text-center font-bold text-white shadow-lg transition hover:from-orange-600 hover:to-orange-700 hover:shadow-orange-500/25"
      >
        {ctaText}
      </a>

      <div class="flex items-center justify-between">
        {
          ratings && (
            <div class="flex items-center space-x-2">
              <span class="text-xs font-medium text-slate-400">
                {ratings.source}
              </span>
              <div class="flex items-center">
                {Array.from({ length: 5 }).map((_, i) => (
                  <span
                    class={`text-sm ${i < ratings.stars ? "text-yellow-400" : "text-slate-600"}`}
                  >
                    ★
                  </span>
                ))}
                <span class="ml-1 text-xs font-semibold text-slate-300">
                  {ratings.stars.toFixed(1)}
                </span>
              </div>
            </div>
          )
        }

        {
          reviewLink && (
            <a
              href={reviewLink.url}
              class="text-xs font-semibold text-orange-400 hover:text-orange-300"
            >
              {reviewLink.text} →
            </a>
          )
        }
      </div>
    </div>
  </div>
</div>
