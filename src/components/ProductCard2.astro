---
export interface Props {
  product: any;
}
const { product } = Astro.props;
const { Content } = await product.render();
const {
  title,
  imageSrc,
  badgeText,
  mediaFeature,
  features = [],
  ctaText = "SHOP NOW",
  ctaLink = "#",
  ratings,
  reviewLink,
} = product.data;
---

<div class="mx-auto max-w-6xl overflow-hidden rounded-2xl bg-white shadow-lg">
  <div class="flex flex-col lg:flex-row">
    <div class="lg:w-2/5">
      <img
        src={imageSrc || "/placeholder.svg"}
        alt={title}
        class="h-64 w-full object-cover lg:h-full"
      />
    </div>
    <div class="flex-1 p-8">
      <div class="flex h-full flex-col">
        {
          badgeText && (
            <div class="mb-3 flex items-center font-semibold text-indigo-700">
              <span class="mr-2">★</span>
              <span>{badgeText}</span>
            </div>
          )
        }
        <h2 class="mb-4 text-3xl font-bold text-indigo-900">{title}</h2>
        <div class="prose mb-6 flex-1 text-indigo-800">
          <Content />
        </div>

        <div class="space-y-4">
          {
            features.length > 0 && (
              <ul class="grid grid-cols-1 gap-2 sm:grid-cols-2">
                {features.map((feature) => (
                  <li class="flex items-center text-indigo-700">
                    <span class="mr-2">☁️</span>
                    <span class="text-sm">{feature}</span>
                  </li>
                ))}
              </ul>
            )
          }

          {
            mediaFeature && (
              <div class="flex items-center border-t border-gray-200 pt-4">
                <p class="mr-3 font-semibold text-indigo-800">
                  {mediaFeature.text}
                </p>
                <img
                  src={mediaFeature.logoSrc || "/placeholder.svg"}
                  alt="Media logo"
                  class="h-8 w-auto"
                />
              </div>
            )
          }

          <div
            class="flex flex-col gap-4 border-t border-gray-200 pt-4 sm:flex-row sm:items-center sm:justify-between"
          >
            <a
              href={ctaLink}
              class="inline-block rounded-lg bg-orange-500 px-6 py-3 font-bold text-white transition hover:bg-orange-600"
            >
              {ctaText}
            </a>

            {
              ratings && (
                <div class="flex items-center space-x-2">
                  <span class="text-sm font-semibold text-indigo-800">
                    {ratings.source}
                  </span>
                  <div class="flex items-center">
                    {Array.from({ length: 5 }).map((_, i) => (
                      <span
                        class={`text-lg ${i < ratings.stars ? "text-yellow-400" : "text-gray-300"}`}
                      >
                        ★
                      </span>
                    ))}
                    <span class="ml-1 text-sm font-semibold">
                      {ratings.stars.toFixed(1)}
                    </span>
                  </div>
                </div>
              )
            }
          </div>

          {
            reviewLink && (
              <a
                href={reviewLink.url}
                class="block text-center font-bold text-orange-500 hover:underline sm:text-left"
              >
                {reviewLink.text}
              </a>
            )
          }
        </div>
      </div>
    </div>
  </div>
</div>
