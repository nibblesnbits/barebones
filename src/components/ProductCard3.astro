---
export interface Props {
  product: any;
}
const { product } = Astro.props;
const { Content } = await product.render();
const {
  title,
  imageSrc,
  badgeText,
  mediaFeature,
  features = [],
  ctaText = "SHOP NOW",
  ctaLink = "#",
  ratings,
  reviewLink,
} = product.data;
---

<div
  class="mx-auto max-w-lg overflow-hidden rounded-3xl bg-white shadow-sm ring-1 ring-gray-100"
>
  <div class="relative">
    <img
      src={imageSrc || "/placeholder.svg"}
      alt={title}
      class="h-72 w-full object-cover"
    />
    {
      badgeText && (
        <div class="absolute top-4 left-4 rounded-full bg-white/90 px-3 py-1 backdrop-blur-sm">
          <span class="text-sm font-medium text-indigo-700">★ {badgeText}</span>
        </div>
      )
    }
  </div>

  <div class="p-8">
    <div class="mb-6 text-center">
      <h2 class="mb-3 text-2xl font-semibold text-gray-900">{title}</h2>
      <div class="prose prose-sm mx-auto text-gray-600">
        <Content />
      </div>
    </div>

    {
      features.length > 0 && (
        <div class="mb-6 space-y-2">
          {features.map((feature) => (
            <div class="flex items-center justify-center text-sm text-gray-600">
              <span class="mr-2 text-indigo-500">•</span>
              <span>{feature}</span>
            </div>
          ))}
        </div>
      )
    }

    {
      mediaFeature && (
        <div class="mb-6 flex items-center justify-center space-x-3 rounded-lg bg-gray-50 py-3">
          <span class="text-sm font-medium text-gray-700">
            {mediaFeature.text}
          </span>
          <img
            src={mediaFeature.logoSrc || "/placeholder.svg"}
            alt="Media logo"
            class="h-6 w-auto"
          />
        </div>
      )
    }

    <div class="space-y-4">
      <a
        href={ctaLink}
        class="block w-full rounded-xl bg-gradient-to-r from-orange-500 to-orange-600 py-3 text-center font-semibold text-white transition hover:from-orange-600 hover:to-orange-700"
      >
        {ctaText}
      </a>

      {
        ratings && (
          <div class="flex items-center justify-center space-x-3 text-sm">
            <span class="font-medium text-gray-700">{ratings.source}</span>
            <div class="flex items-center">
              {Array.from({ length: 5 }).map((_, i) => (
                <span
                  class={`${i < ratings.stars ? "text-yellow-400" : "text-gray-300"}`}
                >
                  ★
                </span>
              ))}
              <span class="ml-1 font-medium text-gray-700">
                {ratings.stars.toFixed(1)}
              </span>
            </div>
          </div>
        )
      }

      {
        reviewLink && (
          <div class="text-center">
            <a
              href={reviewLink.url}
              class="text-sm font-medium text-orange-500 hover:text-orange-600"
            >
              {reviewLink.text} →
            </a>
          </div>
        )
      }
    </div>
  </div>
</div>
